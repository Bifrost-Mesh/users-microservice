// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package generated

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into
  users(
    name,
    email,
    username,
    hashed_password
  )
values
  ($1, $2, $3, $4)
returning
  id
`

type CreateUserParams struct {
	Name           string
	Email          string
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
select
  id,
  hashed_password
from
  users
where
  email = $1
limit
  1
`

type FindUserByEmailRow struct {
	ID             int32
	HashedPassword string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (*FindUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return &i, err
}

const findUserByID = `-- name: FindUserByID :one
select
  id
from
  users
where
  id = $1
limit
  1
`

func (q *Queries) FindUserByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
select
  id,
  hashed_password
from
  users
where
  username = $1
limit
  1
`

type FindUserByUsernameRow struct {
	ID             int32
	HashedPassword string
}

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (*FindUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i FindUserByUsernameRow
	err := row.Scan(&i.ID, &i.HashedPassword)
	return &i, err
}
